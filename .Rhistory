getwd()
##### INITIALIZING #####
##### Retrieve data #####
## Download the zip file containing the data, if it has not been downloaded yet.
urlZip          <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
fileZip         <- "repdata%2Fdata%2Factivity.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- ""
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
##Read data
steps <- read.csv("activity.csv")
View(steps)
str(steps)
steps$date <- as.Date(steps$date)
str(steps)
?aggregate
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps$steps, by = steps$date, FUN = sum, na.action = na.omit )
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps$steps,steps$date, FUN = sum, na.action = na.omit )
##Read data
steps <- read.csv("activity.csv")
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps$steps,steps$date, FUN = sum, na.action = na.omit )
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps$steps ~ steps$date, FUN = sum, na.action = na.omit )
head(stepsPerDay)
head(steps)
hist(stepsperDay)
hist(stepsPerDay)
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps FUN = sum, na.action = na.omit )
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
head(stepsPerDay)
hist(stepsPerDay$steps, stepsPerDay$date)
hist(stepsPerDay$steps ~ stepsPerDay$date)
hist(stepsPerDay$date ~ stepsPerDay$steps)
hist(stepsPerDay$steps)
## transform date column to be of type 'date'
steps$date <- as.Date(as.character(steps$date), "%Y%m%d")
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
head(steps)
## transform date column to be of type 'date'
steps$date <- as.Date(as.character(steps$date), "%d%m%y")
?as.date
steps$date <- as.Date(as.character(steps$date), format ="%d/%m/%Y")
##Read data
steps <- read.csv("activity.csv")
## transform date column to be of type 'date'
steps$date <- as.Date(as.character(steps$date), format ="%d/%m/%Y")
head(steps)
##Read data
steps <- read.csv("activity.csv")
head(steps)
head(as.character(steps$date))
head(as.Date(as.character(steps$date)), format = "%d/%m/%Y")
steps$date <- as.Date(as.character(steps$date), format ="%d/%m/%Y")
head(steps)
##Read data
steps <- read.csv("activity.csv")
## transform date column to be of type 'date'
steps$dateNew <- as.Date(as.character(steps$date), format ="%d/%m/%Y")
head(steps)
## transform date column to be of type 'date'
steps$dateNew <- as.Date(as.character(steps$date), format ="%Y/%m/%d")
head(steps)
##Read data
steps <- read.csv("activity.csv")
## transform date column to be of type 'date'
steps$date <- as.Date(steps$date)
head(steps)
str(steps)
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDay$date, stepsPerDay$steps)
hist(stepsPerDay)
hist(stepsPerDay$steps)
hist(stepsPerDay$steps, main = "Number of steps per day", xlab = "Number of steps")
hist(stepsPerDay$steps, main = "Number of steps per day", xlab = "Number of steps", breaks =10)
hist(stepsPerDay$steps, main = "Number of steps per day", xlab = "Number of steps", breaks =10, col = "grey")
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 20,
col = "grey",
xlim = c(0,25000))
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsMean  <- mean (stepsPerDay$steps)
stepsMedian <- median(stepsPerDay$steps)
stepsmean
stepsMean
stepsMedian
stepsPerDay
str(steps)
str(stepsPerday)
str(stepsPerDay)
stepsMean   <- mean(stepsPerDay$steps, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$steps, na.rm = TRUE)
Paste("The mean number of steps is ", stepsMean)
paste("The mean number of steps is ", stepsMean)
paste("The median number of steps is", stepsMedian)
paste("The mean number of steps is", stepsMean)
StepsPerInterval <- aggregate(steps~interval, data = steps, FUN = mean, na.action = na.omit)
head(StepsPerInterval)
with(stepsPerInterval, plot(interval, steps, type = "l"))
stepsPerInterval <- aggregate(steps~interval, data = steps, FUN = mean, na.action = na.omit)
with(stepsPerInterval, plot(interval, steps, type = "l"))
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
?which.max
##
which.max(stepsPerInterval)
##
which.max(stepsPerInterval$steps)
max(stepsPerInterval$steps)
##
stepsPerInterval[which.max(stepsPerInterval$steps),]
##
stepsPerInterval[which.max(stepsPerInterval$steps),1]
sum(is.na(steps))
sum(is.na(steps$steps))
sum(is.na(steps$date))
sum(is.na(steps$interval))
sum(is.na(steps$steps))
##Find which interval the highest average number of steps has
maxInterval <- stepsPerInterval[which.max(stepsPerInterval$steps),1]
abline(h= maxInterval)
maxInterval
abline(v= maxInterval)
abline(v= maxInterval, pch = 20)
abline(v= maxInterval, lwd = 5)
abline(v= maxInterval, lwd = 3)
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
##Find which interval the highest average number of steps has
maxInterval <- stepsPerInterval[which.max(stepsPerInterval$steps),1]
abline(v= maxInterval, lwd = 3)
abline(v= maxInterval, lwd = 3, lty = 2)
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
##Find which interval the highest average number of steps has
maxInterval <- stepsPerInterval[which.max(stepsPerInterval$steps),1]
abline(v= maxInterval, lwd = 3, lty = 2)
##Fill in the mean number of steps in that interval (over all days)
findNa <- is.na(steps)
##Fill in the mean number of steps in that interval (over all days)
findNa <- is.na(steps$steps)
head(findNa)
head(steps[findNa,])
head(stepsPerInterval)
##Fill in the mean number of steps in that interval (over all days)
findNa <- which(is.na(steps$steps))
##Fill in the mean number of steps in that interval (over all days)
IdNA <- which(is.na(steps$steps))
##Fill in the mean number of steps in that interval (over all days)
idNA <- which(is.na(steps$steps))
i = 1
steps[i,1]
test <- steps
stepsPerInterval[idNA[i],2]
i = 10
stepsPerInterval[idNA[i],2]
for( i in 1:nrow(idNA)) {
test$steps <- stepsPerInterval[idNA[i],2]
}
nrow(idNA)
##Fill in the mean number of steps in that interval (over all days)
idNA <- which(is.na(steps$steps))
nrow(idNA)
length(idNA)
for( i in 1:length(idNA)) {
test$steps <- stepsPerInterval[idNA[i],2]
}
head(tes)
head(test)
test <- steps
for( i in 1:length(idNA)) {
test[idNA[i],1] <- stepsPerInterval[idNA[i],2]
}
head(test)
head(stepsPerInterval)
sum(is.na(steps))
sum(is.na(test))
View(test)
which(is.na(test))
test[2017,]
##Fill in the mean number of steps in that interval (over all days)
idNA <- which(is.na(steps$steps))
test <- steps
for( i in 1:length(idNA)) {
test[idNA[i],1] <- stepsPerInterval[idNA[i],2]
}
sum(is.na(steps))
sum(is.na(test))
length(idNA)
idNA[2304]
idNA[100]
idNA[200]
idNA[2000]
idNA[1000]
idNA[500]
idNA[450]
idNA[430]
idNA[400]
idNA[350]
idNA[300]
idNA[290]
idNA[289]
head(test[2017,])
test[idNA[289],1]
stepsPerInterval[idNA[289],2]
which(stepsPerInterval$interval == test[idNA[289],1])
which(stepsPerInterval$interval == test[idNA[289],2])
which(stepsPerInterval$interval == test[idNA[289],3])
##Fill in the mean number of steps in that interval (over all days)
idNA <- which(is.na(steps$steps))
test <- steps
for( i in 1:length(idNA)) {
test[idNA[i],1] <- stepsPerInterval[which(stepsPerInterval$interval == test[idNA[i],3]),2]
}
sum(is.na(test))
head(test)
head(test[2017,])
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
##Read data
steps <- read.csv("activity.csv")
## transform date column to be of type 'date'
steps$date <- as.Date(steps$date)
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
par(mfrow = c(3,1))
##Read data
steps <- read.csv("activity.csv")
## transform date column to be of type 'date'
steps$date <- as.Date(steps$date)
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsMean   <- mean(stepsPerDay$steps, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$steps, na.rm = TRUE)
## Calculate the mean and median daily number of steps
paste("The mean number of steps is", stepsMean)
paste("The median number of steps is", stepsMedian)
## Calculate and plot the average number of steps per 5-minute interval
stepsPerInterval <- aggregate(steps~interval, data = steps, FUN = mean, na.action = na.omit)
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
##Find which interval the highest average number of steps has
maxInterval <- stepsPerInterval[which.max(stepsPerInterval$steps),1]
abline(v= maxInterval, lwd = 3, lty = 2)
## NA only occur in the 'steps' column. Calculate the number of NA in the column 'steps'
sum(is.na(steps$steps))
##Fill in the mean number of steps in that interval (over all days)
idNA <- which(is.na(steps$steps))
for( i in 1:length(idNA)) {
steps[idNA[i],1] <- stepsPerInterval[which(stepsPerInterval$interval == steps[idNA[i],3]),2]
}
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsPerDayFilled <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDayFilled$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsFilledMean   <- mean(stepsPerDayFilled$steps, na.rm = TRUE)
stepsFilledMedian <- median(stepsPerDayFilled$steps, na.rm = TRUE)
## Calculate the mean and median daily number of steps
paste("The mean number of steps is", stepsFilledMean)
paste("The median number of steps is", stepsFilledMedian)
stepsPerDayFilled <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDayFilled$steps,
main = "Number of steps per day",
xlab = "Number of steps",
## breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsMean   <- aggregate(steps ~ date,data = steps, FUN = mean, na.action = na.omit )
stepsMedian <- aggregate(steps ~ date,data = steps, FUN = median, na.action = na.omit )
## Calculate the mean and median daily number of steps
paste("The mean number of steps is", stepsMean)
## Calculate the mean and median daily number of steps
paste("The mean number of steps is", mean(stepsMean))
## Calculate the mean and median daily number of steps
paste("The mean number of steps is", mean(stepsMean), na.rm = TRUE)
## Calculate the mean and median daily number of steps
paste("The mean number of steps is", mean(stepsMean, na.rm = TRUE)
)
?mean
##Initialize
library(xtable)
stepsMean
stepsMedian
merged <- merge(stepsMean, stepsMedian, by.x = stepsMean$date)
merged <- merge(stepsMean, stepsMedian, by.x = 1)
head(stepsMean)
head(stepsMedian)
merged <- merge(stepsMean, stepsMedian, by = date)
merged <- merge(stepsMean, stepsMedian, by.x = 1, by.y = 1)
head(merged)
merged <- merge(stepsMean, stepsMedian, by = stepsMean$date)#.x = 1, by.y = 1)
?merge
merged <- merge(stepsMean, stepsMedian, by = "date")#stepsMean$date)#.x = 1, by.y = 1)
head(merged)
names(merged) <- c("date","mean","median")
head(merged)
stepsFilled <- steps
par(mfrow = c(3,1))
##Read data
steps <- read.csv("activity.csv")
## transform date column to be of type 'date'
steps$date <- as.Date(steps$date)
## calculate steps per day (ignore NA)
stepsPerDay <- aggregate(steps ~ date,data = steps, FUN = sum, na.action = na.omit )
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsMean   <- aggregate(steps ~ date,data = steps, FUN = mean, na.action = na.omit )
stepsMedian <- aggregate(steps ~ date,data = steps, FUN = median, na.action = na.omit )
merged <- merge(stepsMean, stepsMedian, by = "date")
names(merged) <- c("date","mean","median")
merged
## Calculate and plot the average number of steps per 5-minute interval
stepsPerInterval <- aggregate(steps~interval, data = steps, FUN = mean, na.action = na.omit)
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
##Find which interval the highest average number of steps has
maxInterval <- stepsPerInterval[which.max(stepsPerInterval$steps),1]
abline(v= maxInterval, lwd = 3, lty = 2)
## NA only occur in the 'steps' column. Calculate the number of NA in the column 'steps'
sum(is.na(steps$steps))
##Fill in the mean number of steps in that interval (over all days)
idNA <- which(is.na(steps$steps))
stepsFilled <- steps
for( i in 1:length(idNA)) {
stepsFilled[idNA[i],1] <- stepsPerInterval[which(stepsPerInterval$interval == steps[idNA[i],3]),2]
}
## calculate steps per day (ignore NA)
stepsPerDayFilled <- aggregate(steps ~ date,data = stepsFilled, FUN = sum, na.action = na.omit )
hist(stepsPerDayFilled$steps,
main = "Number of steps per day",
xlab = "Number of steps",
## breaks = 10,
col = "grey",
xlim = c(0,25000))
## Calculate the mean and median daily number of steps
stepsFilledMean   <- aggregate(steps ~ date,data = stepsFilled, FUN = mean, na.action = na.omit )
stepsFilledMedian <- aggregate(steps ~ date,data = stepsFilled, FUN = median, na.action = na.omit )
mergedFilled <- merge(stepsFilledMean, stepsFilledMedian, by = "date")
names(mergedFilled) <- c("date","mean","median")
mergedFilled
## Fill in Weekday/Weekend
stepsFilled[1,1]
## Fill in Weekday/Weekend
stepsFilled[1,2]
## Fill in Weekday/Weekend
weekdays(stepsFilled[1,2])
Sys.setenv(LANG = "en")
weekdays(stepsFilled[1,2])
Sys.setlocale("LC_TIME", "English")
weekdays(stepsFilled[1,2])
## Fill in Weekday/Weekend
stepsFilled$Weekday <- weekday(stepsFilled$date)
## Fill in Weekday/Weekend
stepsFilled$Weekday <- weekdays(stepsFilled$date)
head(stepsFilled)
stepsFilled$daytype <- ifelse(stepsFilled$Weekday %in% c("Saturday","Sunday"), "Weekend","Weekday")
head(stepsFilled)
View(stepsFilled)
stepsFilled$daytype <- as.factor(ifelse(stepsFilled$Weekday %in% c("Saturday","Sunday"), "Weekend","Weekday"))
head(stepsFilled$daytype)
## create plot
library(ggplot)
## create plot
library(ggplot2)
stepsIntervalDaytype <- aggregate(steps~interval+daytype, data = stepsFilled, FUN = mean, na.action = na.omit)
head(stepsIntervalDaytype)
View(stepsIntervalDaytype)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line()
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(.~daytype)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype.~)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(~.daytype)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid()
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(~.daytype)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype.~)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype.~)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype~.)
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype~.) +
labs(ylab = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype~.) +
labs(y = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_grid(daytype~., ncol =1) +
labs(y = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_wrap(daytype~., ncol =1) +
labs(y = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_wrap(daytype~, ncol =1) +
labs(y = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_wrap(daytype~, ncol =1) +
labs(y = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_wrap(~daytype, ncol =1) +
labs(y = "number of steps")
ggplot(stepsIntervalDaytype, aes(interval, steps,daytype)) +
geom_line() +
facet_wrap(~daytype, ncol =1) +
labs(y = "number of steps", x = "5-minute interval")
knitr::opts_chunk$set(echo = TRUE)
hist(stepsPerDay$steps,
main = "Number of steps per day",
xlab = "Number of steps",
breaks = 10,
col = "grey",
xlim = c(0,25000))
stepsPerInterval <- aggregate(steps~interval, data = steps, FUN = mean, na.action = na.omit)
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
stepsPerInterval <- aggregate(steps~interval, data = steps, FUN = mean, na.action = na.omit)
with(stepsPerInterval, plot(interval, steps, type = "l", col = "red", xlab = "5-minute interval", main = "Average number of steps per 5-minute interval"))
maxInterval <- stepsPerInterval[which.max(stepsPerInterval$steps),1]
abline(v= maxInterval, lwd = 3, lty = 2)
